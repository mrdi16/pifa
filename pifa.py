import logging
import sqlite3
import asyncio
import json
import secrets
import string
import os
from collections import defaultdict
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - –ü–†–û–ë–£–ï–ú –†–ê–ó–ù–´–ï –°–ü–û–°–û–ë–´
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    print("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in os.environ.items():
        print(f"   {key}: {value}")
    exit(1)

BOT_USERNAME = "pythagoras_cube_bot"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_NAME = 'pythagoras_cube.db'
REFERRAL_LINKS_FILE = 'referral_links.json'
MAX_CALCULATIONS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_STATS_FILE = 'user_stats.json'

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            name TEXT,
            birth_date TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

class PythagorasCube:
    def __init__(self, birth_date):
        self.birth_date = birth_date
    
    def calculate(self):
        try:
            print(f"üî¢ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –¥–∞—Ç—ã: {self.birth_date}")
            
            # –û—á–∏—â–∞–µ–º –¥–∞—Ç—É –æ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            date_str = self.birth_date.replace('.', '').replace('/', '').replace('-', '').replace(' ', '')
            print(f"üî¢ –û—á–∏—â–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {date_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
            if not date_str.isdigit():
                print(f"‚ùå –í –¥–∞—Ç–µ –µ—Å—Ç—å –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã: {date_str}")
                return {str(i): 0 for i in range(1, 10)}
            
            if len(date_str) != 8:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∞—Ç—ã: {len(date_str)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 8)")
                return {str(i): 0 for i in range(1, 10)}
            
            digits = [int(d) for d in date_str]
            print(f"üî¢ –¶–∏—Ñ—Ä—ã –¥–∞—Ç—ã: {digits}")
            
            # –ü–µ—Ä–≤–æ–µ —Ä–∞–±–æ—á–µ–µ —á–∏—Å–ª–æ
            first = sum(digits)
            print(f"üî¢ –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: {first}")
            
            # –í—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—á–µ–µ —á–∏—Å–ª–æ
            second = sum(int(d) for d in str(first))
            print(f"üî¢ –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: {second}")
            
            # –¢—Ä–µ—Ç—å–µ —Ä–∞–±–æ—á–µ–µ —á–∏—Å–ª–æ
            third = first - 2 * digits[0]
            print(f"üî¢ –¢—Ä–µ—Ç—å–µ —á–∏—Å–ª–æ: {third}")
            
            # –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Ä–∞–±–æ—á–µ–µ —á–∏—Å–ª–æ
            fourth = sum(int(d) for d in str(abs(third)))  # –ë–µ—Ä–µ–º –º–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
            print(f"üî¢ –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —á–∏—Å–ª–æ: {fourth}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã
            all_digits = ''.join([
                date_str,  # –∏—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞
                str(first),
                str(second),
                str(third),
                str(fourth)
            ])
            print(f"üî¢ –í—Å–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {all_digits}")
            
            # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Ü–∏—Ñ—Ä –æ—Ç 1 –¥–æ 9
            psychomatrix = {}
            for i in range(1, 10):
                count = all_digits.count(str(i))
                psychomatrix[str(i)] = count
                print(f"üî¢ –¶–∏—Ñ—Ä–∞ {i}: {count} —Ä–∞–∑")
            
            print(f"‚úÖ –ü—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {psychomatrix}")
            return psychomatrix
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ calculate(): {e}")
            import traceback
            traceback.print_exc()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü—É –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            return {str(i): 1 for i in range(1, 10)}

    def get_detailed_interpretation(self, psychomatrix, name):
        try:
            print(f"üìñ –ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è {name}")
            print(f"üìñ –ü—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü–∞: {psychomatrix}")
            
            text = f"üîÆ *–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–í–ê–î–†–ê–¢–ê –ü–ò–§–ê–ì–û–†–ê –î–õ–Ø {name.upper()}*\n\n"
            
            # –•–ê–†–ê–ö–¢–ï–† (1)
            char = psychomatrix.get('1', 0)
            text += "üé≠ *1. –•–ê–†–ê–ö–¢–ï–† –ò –°–ò–õ–ê –í–û–õ–ò*\n"
            
            character_interpretations = {
                0: {
                    "title": "–ë–µ–∑–≤–æ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä",
                    "analysis": """–í—ã –æ—á–µ–Ω—å –º—è–≥–∫–∏–π –∏ —É—Å—Ç—É–ø—á–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫. –ß–∞—Å—Ç–æ –∏–¥–µ—Ç–µ –Ω–∞ –ø–æ–≤–æ–¥—É —É –¥—Ä—É–≥–∏—Ö, –Ω–µ —É–º–µ–µ—Ç–µ –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è. –í–∞—à–∞ —Å–ª–∞–±–æ—Å—Ç—å –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π.""",
                    "professions": "–ü–æ–º–æ—â–Ω–∏–∫, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫, –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å",
                    "relationships": "–ü–æ–¥—á–∏–Ω—è–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
                    "development": "–£—á–∏—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å '–Ω–µ—Ç', —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
                },
                1: {
                    "title": "–£—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π —ç–≥–æ–∏—Å—Ç", 
                    "analysis": """–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ª–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π, –Ω–æ –≤—ã –Ω–µ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥ –¥—Ä—É–≥–∏–º–∏. –£–º–µ–µ—Ç–µ –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.""",
                    "professions": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä",
                    "relationships": "–†–∞–≤–Ω–æ–ø—Ä–∞–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —É–º–µ–µ—Ç–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è", 
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"
                },
                2: {
                    "title": "–°–∏–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä",
                    "analysis": """–í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ —Å–∏–ª—å–Ω–æ–π –≤–æ–ª–µ–π –∏ —Ö–∞—Ä–∏–∑–º–æ–π. –£–º–µ–µ—Ç–µ –≤–µ—Å—Ç–∏ –∑–∞ —Å–æ–±–æ–π –ª—é–¥–µ–π, –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –∏ –Ω–µ—Å—Ç–∏ –∑–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —É–ø—Ä—è–º—ã–º.""",
                    "professions": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –º–µ–Ω–µ–¥–∂–µ—Ä, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
                    "relationships": "–õ–∏–¥–µ—Ä –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –±–µ—Ä–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
                    "development": "–£—á–∏—Ç–µ—Å—å —Å–ª—É—à–∞—Ç—å –º–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö"
                },
                3: {
                    "title": "–í–æ–ª–µ–≤–æ–π –¥–∏–∫—Ç–∞—Ç–æ—Ä", 
                    "analysis": """–û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –≤–æ–ª—è, –≥—Ä–∞–Ω–∏—á–∞—â–∞—è —Å –¥–µ—Å–ø–æ—Ç–∏–∑–º–æ–º. –í—ã –ø—Ä–∏–≤—ã–∫–ª–∏, —á—Ç–æ–±—ã –≤—Å–µ –±—ã–ª–æ –ø–æ-–≤–∞—à–µ–º—É, –∏ —Ç—è–∂–µ–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –Ω–µ–ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ.""",
                    "professions": "–î–∏—Ä–µ–∫—Ç–æ—Ä, –≤–æ–µ–Ω–∞—á–∞–ª—å–Ω–∏–∫, –ø–æ–ª–∏—Ç–∏–∫",
                    "relationships": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
                    "development": "–£—á–∏—Ç–µ—Å—å —É–≤–∞–∂–∞—Ç—å —á—É–∂–æ–µ –º–Ω–µ–Ω–∏–µ"
                },
                4: {
                    "title": "–¢–∏—Ä–∞–Ω–∏—á–µ—Å–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä",
                    "analysis": """–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ —Å–∏–ª—å–Ω–∞—è –≤–æ–ª—è, —á–∞—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥—è—â–∞—è –≤ —Ç–∏—Ä–∞–Ω–∏—é. –í—ã –≥–æ—Ç–æ–≤—ã –∏–¥—Ç–∏ –ø–æ –≥–æ–ª–æ–≤–∞–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.""",
                    "professions": "–ö—Ä—É–ø–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –ª–∏–¥–µ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                    "relationships": "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–ø–∞—Ç–∏—é –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ"
                }
            }
            
            char_data = character_interpretations.get(char, character_interpretations[1])
            text += f"   ‚ö° *–¢–∏–ø:* {char_data['title']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {char_data['analysis']}\n"
            text += f"   üíº *–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏:* {char_data['professions']}\n"
            text += f"   ‚ù§Ô∏è *–û—Ç–Ω–æ—à–µ–Ω–∏—è:* {char_data['relationships']}\n" 
            text += f"   üí° *–†–∞–∑–≤–∏—Ç–∏–µ:* {char_data['development']}\n\n"

            # –≠–ù–ï–†–ì–ò–Ø (2)
            energy = psychomatrix.get('2', 0)
            text += "‚ö° *2. –ë–ò–û–≠–ù–ï–†–ì–ò–Ø –ò –≠–ù–ï–†–ì–ï–¢–ò–ö–ê*\n"
            
            energy_interpretations = {
                0: {
                    "level": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–∞–º–ø–∏—Ä",
                    "analysis": """–£ –≤–∞—Å –æ—á–µ–Ω—å —Å–ª–∞–±–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞. –í—ã –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ —Ç—è–Ω–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é –æ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —É –Ω–∏—Ö –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.""",
                    "protection": "–ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º",
                    "recovery": "–ü—Ä–∏—Ä–æ–¥–∞, —Å–æ–Ω, –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                    "danger": "–ë—ã—Å—Ç—Ä–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –¥—Ä—É–≥–∏—Ö"
                },
                1: {
                    "level": "–î–æ–Ω–æ—Ä –¥–ª—è –≤–∞–º–ø–∏—Ä–æ–≤", 
                    "analysis": """–£ –≤–∞—Å –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, –Ω–æ –≤—ã –ª–µ–≥–∫–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –∂–µ—Ä—Ç–≤–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–∞–º–ø–∏—Ä–æ–≤. –ù—É–∂–Ω–æ —É—á–∏—Ç—å—Å—è –∑–∞—â–∏—â–∞—Ç—å—Å—è.""",
                    "protection": "–ò–∑–±–µ–≥–∞–π—Ç–µ —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –ª—é–¥–µ–π, –Ω–æ—Å–∏—Ç–µ –æ–±–µ—Ä–µ–≥–∏",
                    "recovery": "–•–æ–±–±–∏, –ø—Ä–æ–≥—É–ª–∫–∏, –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ",
                    "danger": "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ –æ—Ç –æ–±—â–µ–Ω–∏—è"
                },
                2: {
                    "level": "–°—Ç–∞–±–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞",
                    "analysis": """–£ –≤–∞—Å —Ö–æ—Ä–æ—à–∞—è —É—Å—Ç–æ–π—á–∏–≤–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –¥–æ–Ω–æ—Ä–æ–º, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Å—Ç—Ä–∞–¥–∞–µ—Ç–µ. –£–º–µ–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è.""",
                    "protection": "–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
                    "recovery": "–û—Ç–¥—ã—Ö, —Å–º–µ–Ω–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
                    "danger": "–î–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–µ—Å—Å—ã"
                },
                3: {
                    "level": "–°–∏–ª—å–Ω–∞—è –±–∏–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞",
                    "analysis": """–í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ —Å–∏–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–π –∏ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Ü–µ–ª–∏—Ç–µ–ª–µ–º. –õ—é–¥–∏ —á—É–≤—Å—Ç–≤—É—é—Ç —Å–µ–±—è –ª—É—á—à–µ –≤ –≤–∞—à–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏.""",
                    "protection": "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —ç–º–æ—Ü–∏—è–º–∏",
                    "recovery": "–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
                    "danger": "–ú–æ–∂–µ—Ç–µ –Ω–µ–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö"
                },
                4: {
                    "level": "–ú–æ—â–Ω—ã–π —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å", 
                    "analysis": """–û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, –≥—Ä–∞–Ω–∏—á–∞—â–∞—è —Å —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å–æ—Ä–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏. –í—ã –º–æ–∂–µ—Ç–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤–ª–∏—è—Ç—å –Ω–∞ –Ω–∏—Ö.""",
                    "protection": "–°–ª–æ–∂–Ω—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
                    "recovery": "–ú–µ–¥–∏—Ç–∞—Ü–∏–∏, —Ä–∞–±–æ—Ç–∞ —Å —á–∞–∫—Ä–∞–º–∏",
                    "danger": "–ù–µ–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö"
                }
            }
            
            energy_data = energy_interpretations.get(energy, energy_interpretations[2])
            text += f"   üîã *–£—Ä–æ–≤–µ–Ω—å:* {energy_data['level']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {energy_data['analysis']}\n"
            text += f"   üõ°Ô∏è *–ó–∞—â–∏—Ç–∞:* {energy_data['protection']}\n"
            text += f"   üîÑ *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:* {energy_data['recovery']}\n"
            text += f"   ‚ö†Ô∏è *–û–ø–∞—Å–Ω–æ—Å—Ç–∏:* {energy_data['danger']}\n\n"

            # –ò–ù–¢–ï–†–ï–°–´ –ö –ù–ê–£–ö–ï (3)
            science = psychomatrix.get('3', 0)
            text += "üî¨ *3. –ü–û–ó–ù–ê–ù–ò–ï –ò –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò*\n"
            
            science_interpretations = {
                0: {
                    "type": "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π",
                    "analysis": """–í—ã —á–∏—Å—Ç—ã–π –≥—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏ –¥–∞—é—Ç—Å—è —Å —Ç—Ä—É–¥–æ–º, –∑–∞—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ —è–∑—ã–∫–∞–º, –∏—Å–∫—É—Å—Å—Ç–≤—É, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.""",
                    "professions": "–ü–∏—Å–∞—Ç–µ–ª—å, –ø—Å–∏—Ö–æ–ª–æ–≥, —É—á–∏—Ç–µ–ª—å, —Ö—É–¥–æ–∂–Ω–∏–∫",
                    "learning": "–ß–µ—Ä–µ–∑ –æ–±—Ä–∞–∑—ã –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
                },
                1: {
                    "type": "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π —Å –Ω–∞–∫–ª–æ–Ω–Ω–æ—Å—Ç—è–º–∏",
                    "analysis": """–í –æ—Å–Ω–æ–≤–Ω–æ–º –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π —Å–∫–ª–∞–¥ —É–º–∞, –Ω–æ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ—Ö–Ω–∏–∫–µ. –ú–æ–∂–µ—Ç–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.""",
                    "professions": "–î–∏–∑–∞–π–Ω–µ—Ä, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –∂—É—Ä–Ω–∞–ª–∏—Å—Ç",
                    "learning": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥",
                    "development": "–ò–∑—É—á–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞—É–∫–∏"
                },
                2: {
                    "type": "–ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π —É–º",
                    "analysis": """–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –í —Ä–∞–≤–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –º–æ–∂–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∫–∞–∫ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–º–∏, —Ç–∞–∫ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—É–∫–∞–º–∏.""",
                    "professions": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –≤—Ä–∞—á",
                    "learning": "–õ—é–±—ã–µ –º–µ—Ç–æ–¥—ã",
                    "development": "–£–≥–ª—É–±–ª–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"
                },
                3: {
                    "type": "–¢–µ—Ö–Ω–∞—Ä—å —Å –Ω–∞–∫–ª–æ–Ω–Ω–æ—Å—Ç—è–º–∏",
                    "analysis": """–í –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞, –Ω–æ –µ—Å—Ç—å –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã. –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –Ω–∞–¥ —ç–º–æ—Ü–∏—è–º–∏.""",
                    "professions": "–ò–Ω–∂–µ–Ω–µ—Ä, —É—á–µ–Ω—ã–π, –∞–Ω–∞–ª–∏—Ç–∏–∫",
                    "learning": "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ"
                },
                4: {
                    "type": "–ß–∏—Å—Ç—ã–π —Ç–µ—Ö–Ω–∞—Ä—å",
                    "analysis": """–Ø—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –ú—ã—Å–ª–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏, –ª—é–±–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.""",
                    "professions": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –º–∞—Ç–µ–º–∞—Ç–∏–∫, —Ñ–∏–∑–∏–∫",
                    "learning": "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
                }
            }
            
            science_data = science_interpretations.get(science, science_interpretations[2])
            text += f"   üß† *–¢–∏–ø —É–º–∞:* {science_data['type']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {science_data['analysis']}\n"
            text += f"   üíº *–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏:* {science_data['professions']}\n"
            text += f"   üìö *–û–±—É—á–µ–Ω–∏–µ:* {science_data['learning']}\n"
            text += f"   üí° *–†–∞–∑–≤–∏—Ç–∏–µ:* {science_data['development']}\n\n"

            # –ó–î–û–†–û–í–¨–ï (4)
            health = psychomatrix.get('4', 0)
            text += "‚ù§Ô∏è *4. –ó–î–û–†–û–í–¨–ï –ò –í–ò–¢–ê–õ–¨–ù–û–°–¢–¨*\n"
            
            health_interpretations = {
                0: {
                    "potential": "–°–ª–∞–±–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                    "analysis": """–û—Ç –ø—Ä–∏—Ä–æ–¥—ã —Å–ª–∞–±–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º. –ù—É–∂–Ω–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏.""",
                    "recommendations": "–©–∞–¥—è—â–∏–π —Ä–µ–∂–∏–º, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                    "prevention": "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –∏–∑–±–µ–≥–∞–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–≤",
                    "dangers": "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è, –Ω–∏–∑–∫–∏–π –∏–º–º—É–Ω–∏—Ç–µ—Ç"
                },
                1: {
                    "potential": "–°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                    "analysis": """–ó–¥–æ—Ä–æ–≤—å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ, –Ω–æ –Ω–µ –∂–µ–ª–µ–∑–Ω–æ–µ. –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ –ª–µ–≥–∫–æ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã.""",
                    "recommendations": "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏",
                    "prevention": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –≤–∏—Ç–∞–º–∏–Ω—ã",
                    "dangers": "–°—Ç—Ä–µ—Å—Å—ã, –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏"
                },
                2: {
                    "potential": "–ö—Ä–µ–ø–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", 
                    "analysis": """–•–æ—Ä–æ—à–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç –ø—Ä–∏—Ä–æ–¥—ã. –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–æ–ª–µ–∑–Ω–µ–π, –≤—ã—Å–æ–∫–∞—è –∂–∏–∑–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å.""",
                    "recommendations": "–ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏, —Å–ø–æ—Ä—Ç",
                    "prevention": "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏",
                    "dangers": "–ü—Ä–µ–Ω–µ–±—Ä–µ–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–æ–π"
                },
                3: {
                    "potential": "–û—á–µ–Ω—å –∫—Ä–µ–ø–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                    "analysis": """–û—Ç–ª–∏—á–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –±–æ–ª–µ–µ—Ç–µ. –í—ã—Å–æ–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏ –±—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è.""",
                    "recommendations": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç, —ç–∫—Å—Ç—Ä–∏–º",
                    "prevention": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
                    "dangers": "–ò–∑–ª–∏—à–Ω—è—è —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"
                },
                4: {
                    "potential": "–ñ–µ–ª–µ–∑–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                    "analysis": """–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä–µ–ø–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏. –†–µ–¥–∫–æ –±–æ–ª–µ–µ—Ç–µ.""",
                    "recommendations": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞",
                    "prevention": "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                    "dangers": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                }
            }
            
            health_data = health_interpretations.get(health, health_interpretations[2])
            text += f"   üí™ *–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:* {health_data['potential']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {health_data['analysis']}\n"
            text += f"   üèÉ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* {health_data['recommendations']}\n"
            text += f"   üõ°Ô∏è *–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:* {health_data['prevention']}\n"
            text += f"   ‚ö†Ô∏è *–†–∏—Å–∫–∏:* {health_data['dangers']}\n\n"

            # –õ–û–ì–ò–ö–ê –ò –ò–ù–¢–£–ò–¶–ò–Ø (5)
            logic = psychomatrix.get('5', 0)
            text += "üß† *5. –õ–û–ì–ò–ö–ê –ò –ò–ù–¢–£–ò–¶–ò–Ø*\n"
            
            logic_interpretations = {
                0: {
                    "type": "–ß–∏—Å—Ç–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è",
                    "analysis": """–í—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ. –õ–æ–≥–∏–∫–∞ —Å–ª–∞–±–∞—è, –Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —á—É—Ç—å–µ –∏ –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ.""",
                    "strengths": "–ü—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏—è, –æ–∑–∞—Ä–µ–Ω–∏—è, —Ç–æ–Ω–∫–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ",
                    "weaknesses": "–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –Ω–µ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
                },
                1: {
                    "type": "–ò–Ω—Ç—É–∏—Ü–∏—è —Å –ª–æ–≥–∏–∫–æ–π",
                    "analysis": """–ò–Ω—Ç—É–∏—Ü–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –Ω–∞–¥ –ª–æ–≥–∏–∫–æ–π, –Ω–æ –≤—ã —Å–ø–æ—Å–æ–±–Ω—ã –∫ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –º—ã—à–ª–µ–Ω–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.""",
                    "strengths": "–•–æ—Ä–æ—à–µ–µ —á—É—Ç—å–µ, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥",
                    "weaknesses": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–∏—Å—Ç–µ–º–Ω–æ—Å—Ç–∏",
                    "development": "–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
                },
                2: {
                    "type": "–ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å",
                    "analysis": """–ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ª–æ–≥–∏–∫–∏ –∏ –∏–Ω—Ç—É–∏—Ü–∏–∏. –£–º–µ–µ—Ç–µ –∏ –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∏ –¥–æ–≤–µ—Ä—è—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.""",
                    "strengths": "–í–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ",
                    "weaknesses": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è",
                    "development": "–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ –æ–±–∞ –∫–∞—á–µ—Å—Ç–≤–∞"
                },
                3: {
                    "type": "–õ–æ–≥–∏–∫–∞ —Å –∏–Ω—Ç—É–∏—Ü–∏–µ–π",
                    "analysis": """–õ–æ–≥–∏–∫–∞ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç, –Ω–æ –∏–Ω—Ç—É–∏—Ü–∏—è —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞.""",
                    "strengths": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —É–º, —Å–∏—Å—Ç–µ–º–Ω–æ—Å—Ç—å",
                    "weaknesses": "–ò–∑–ª–∏—à–Ω–∏–π —Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–º",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –∏–Ω—Ç—É–∏—Ü–∏–∏"
                },
                4: {
                    "type": "–ß–∏—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞",
                    "analysis": """–Ø—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ. –î–æ–≤–µ—Ä—è–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∞–º –∏ —Ä–∞—Å—á–µ—Ç–∞–º.""",
                    "strengths": "–ê–Ω–∞–ª–∏–∑, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                    "weaknesses": "–ù–µ–¥–æ–æ—Ü–µ–Ω–∫–∞ –∏–Ω—Ç—É–∏—Ü–∏–∏",
                    "development": "–£—á–∏—Ç–µ—Å—å —Å–ª—É—à–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å"
                }
            }
            
            logic_data = logic_interpretations.get(logic, logic_interpretations[2])
            text += f"   ‚öñÔ∏è *–¢–∏–ø –º—ã—à–ª–µ–Ω–∏—è:* {logic_data['type']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {logic_data['analysis']}\n"
            text += f"   ‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:* {logic_data['strengths']}\n"
            text += f"   ‚ùå *–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:* {logic_data['weaknesses']}\n"
            text += f"   üí° *–†–∞–∑–≤–∏—Ç–∏–µ:* {logic_data['development']}\n\n"

            # –¢–†–£–î–û–õ–Æ–ë–ò–ï (6)
            labor = psychomatrix.get('6', 0)
            text += "üõ†Ô∏è *6. –¢–†–£–î–û–õ–Æ–ë–ò–ï –ò –ú–ê–°–¢–ï–†–°–¢–í–û*\n"
            
            labor_interpretations = {
                0: {
                    "approach": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –±–µ–∑–¥–µ–ª—å–Ω–∏–∫",
                    "analysis": """–ù–µ –ª—é–±–∏—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏–ª–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É. –ú–æ–∂–µ—Ç –±—ã—Ç—å –ª–µ–Ω—å.""",
                    "ideal_work": "–ò—Å–∫—É—Å—Å—Ç–≤–æ, –¥–∏–∑–∞–π–Ω, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "difficulties": "–†—É—Ç–∏–Ω–∞, –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–π —Ç—Ä—É–¥",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"
                },
                1: {
                    "approach": "–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫",
                    "analysis": """–¢—Ä—É–¥–æ–ª—é–±–∏–≤—ã –≤ —Ç–æ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ú–æ–∂–µ—Ç–µ –ª–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—É—á–Ω—ã—Ö –∑–∞–¥–∞—á.""",
                    "ideal_work": "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
                    "difficulties": "–†—É—Ç–∏–Ω–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏",
                    "development": "–£—á–∏—Ç–µ—Å—å –¥–æ–≤–æ–¥–∏—Ç—å –¥–µ–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞"
                },
                2: {
                    "approach": "–ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫", 
                    "analysis": """–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ–ª—é–±–∏–µ. –£–º–µ–µ—Ç–µ –∏ —Ä–∞–±–æ—Ç–∞—Ç—å, –∏ –æ—Ç–¥—ã—Ö–∞—Ç—å. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º.""",
                    "ideal_work": "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π",
                    "difficulties": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"
                },
                3: {
                    "approach": "–¢—Ä—É–¥–æ–≥–æ–ª–∏–∫",
                    "analysis": """–û—á–µ–Ω—å —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã, –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –∏–∑–Ω–æ—Å. –ò–Ω–æ–≥–¥–∞ –∑–∞–±—ã–≤–∞–µ—Ç–µ –æ–± –æ—Ç–¥—ã—Ö–µ –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏.""",
                    "ideal_work": "–ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –±–∏–∑–Ω–µ—Å",
                    "difficulties": "–ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç–∞-–æ—Ç–¥—ã—Ö",
                    "development": "–£—á–∏—Ç–µ—Å—å –æ—Ç–¥—ã—Ö–∞—Ç—å"
                },
                4: {
                    "approach": "–ú–∞—Å—Ç–µ—Ä-–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª",
                    "analysis": """–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ–ª—é–±–∏–µ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ. –î–æ–≤–æ–¥–∏—Ç–µ –ª—é–±–æ–µ –¥–µ–ª–æ –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞.""",
                    "ideal_work": "–≠–∫—Å–ø–µ—Ä—Ç, –º–∞—Å—Ç–µ—Ä, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
                    "difficulties": "–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ",
                    "development": "–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏–π"
                }
            }
            
            labor_data = labor_interpretations.get(labor, labor_interpretations[2])
            text += f"   üîß *–ü–æ–¥—Ö–æ–¥ –∫ —Ç—Ä—É–¥—É:* {labor_data['approach']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {labor_data['analysis']}\n"
            text += f"   üíº *–ò–¥–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞:* {labor_data['ideal_work']}\n"
            text += f"   ‚ö†Ô∏è *–°–ª–æ–∂–Ω–æ—Å—Ç–∏:* {labor_data['difficulties']}\n"
            text += f"   üí° *–†–∞–∑–≤–∏—Ç–∏–µ:* {labor_data['development']}\n\n"

            # –£–î–ê–ß–ê (7)
            luck = psychomatrix.get('7', 0)
            text += "üçÄ *7. –£–î–ê–ß–ê –ò –í–ï–ó–ï–ù–ò–ï*\n"
            
            luck_interpretations = {
                0: {
                    "attitude": "–ù–µ–≤–µ–∑—É—á–∏–π",
                    "analysis": """–í–∞–º —á–∞—Å—Ç–æ –Ω–µ –≤–µ–∑–µ—Ç, –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –≤—Å–µ–≥–æ –¥–æ–±–∏–≤–∞—Ç—å—Å—è —Ç—è–∂–µ–ª—ã–º —Ç—Ä—É–¥–æ–º. –£–¥–∞—á–∞ –æ–±—Ö–æ–¥–∏—Ç —Å—Ç–æ—Ä–æ–Ω–æ–π.""",
                    "strengths": "–£–ø–æ—Ä—Å—Ç–≤–æ, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                    "weaknesses": "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è",
                    "development": "–£—á–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
                },
                1: {
                    "attitude": "–°—Ç–∞–±–∏–ª—å–Ω—ã–π",
                    "analysis": """–£–¥–∞—á–∞ –±—ã–≤–∞–µ—Ç, –Ω–æ –Ω–µ—á–∞—Å—Ç–æ. –í –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–ª–∞–≥–∞–µ—Ç–µ—Å—å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.""",
                    "strengths": "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å",
                    "weaknesses": "–ù–µ—Ö–≤–∞—Ç–∫–∞ –≤–µ–∑–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏—é –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —à–∞–Ω—Å–æ–≤"
                },
                2: {
                    "attitude": "–£–¥–∞—á–ª–∏–≤—ã–π", 
                    "analysis": """–í–∞–º —á–∞—Å—Ç–æ –≤–µ–∑–µ—Ç –≤ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –£–º–µ–µ—Ç–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ.""",
                    "strengths": "–í–µ–∑–µ–Ω–∏–µ, —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                    "weaknesses": "–ú–æ–∂–µ—Ç–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —É–¥–∞—á—É –±–æ–ª—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ",
                    "development": "–°–æ—á–µ—Ç–∞–π—Ç–µ –≤–µ–∑–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
                },
                3: {
                    "attitude": "–í–µ–∑—É–Ω—á–∏–∫",
                    "analysis": """–í–∞–º –æ—á–µ–Ω—å –≤–µ–∑–µ—Ç –ø–æ –∂–∏–∑–Ω–∏. –î–∞–∂–µ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥.""",
                    "strengths": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –≤–µ–∑–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥ –∏–∑ –ª—é–±—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π",
                    "weaknesses": "–†–∏—Å–∫ —Å—Ç–∞—Ç—å –±–µ—Å–ø–µ—á–Ω—ã–º",
                    "development": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–∞—á—É –¥–ª—è –ø–æ–º–æ—â–∏ –¥—Ä—É–≥–∏–º"
                },
                4: {
                    "attitude": "–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫",
                    "analysis": """–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —É–¥–∞—á–ª–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫. –§–æ—Ä—Ç—É–Ω–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.""",
                    "strengths": "–§–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–∑–µ–Ω–∏–µ, –≤—ã–∏–≥—Ä—ã—à–∏",
                    "weaknesses": "–ú–æ–≥—É—Ç –∑–∞–≤–∏–¥–æ–≤–∞—Ç—å",
                    "development": "–î–µ–ª–∏—Ç–µ—Å—å —É–¥–∞—á–µ–π —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏"
                }
            }
            
            luck_data = luck_interpretations.get(luck, luck_interpretations[2])
            text += f"   üéØ *–û—Ç–Ω–æ—à–µ–Ω–∏–µ —É–¥–∞—á–∏:* {luck_data['attitude']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {luck_data['analysis']}\n"
            text += f"   ‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:* {luck_data['strengths']}\n"
            text += f"   ‚ùå *–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:* {luck_data['weaknesses']}\n"
            text += f"   üí° *–†–∞–∑–≤–∏—Ç–∏–µ:* {luck_data['development']}\n\n"

            # –ß–£–í–°–¢–í–û –î–û–õ–ì–ê (8)
            duty = psychomatrix.get('8', 0)
            text += "‚öñÔ∏è *8. –ß–£–í–°–¢–í–û –î–û–õ–ì–ê –ò –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨*\n"
            
            duty_interpretations = {
                0: {
                    "attitude": "–ë–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
                    "analysis": """–ò–∑–±–µ–≥–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–µ –ª—é–±–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–≤–æ–±–æ–¥—É –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å.""",
                    "strengths": "–°–≤–æ–±–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏–π, –≥–∏–±–∫–æ—Å—Ç—å",
                    "weaknesses": "–ù–µ–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –±–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
                    "development": "–£—á–∏—Ç–µ—Å—å –±—Ä–∞—Ç—å –Ω–∞ —Å–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
                },
                1: {
                    "attitude": "–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
                    "analysis": """–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å. –ú–æ–∂–µ—Ç–µ —É–∫–ª–æ–Ω—è—Ç—å—Å—è –æ—Ç –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤.""",
                    "strengths": "–ì–∏–±–∫–æ—Å—Ç—å, —É–º–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
                    "weaknesses": "–ù–µ–ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å"
                },
                2: {
                    "attitude": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", 
                    "analysis": """–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –¥–æ–ª–≥–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç–µ –æ–±–µ—â–∞–Ω–Ω–æ–µ, –Ω–∞ –≤–∞—Å –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è.""",
                    "strengths": "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                    "weaknesses": "–ò–Ω–æ–≥–¥–∞ –±–µ—Ä–µ—Ç–µ –Ω–∞ —Å–µ–±—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ",
                    "development": "–£—á–∏—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å '–Ω–µ—Ç'"
                },
                3: {
                    "attitude": "–ß—Ä–µ–∑–º–µ—Ä–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
                    "analysis": """–û—á–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–æ–µ —á—É–≤—Å—Ç–≤–æ –¥–æ–ª–≥–∞. –ß–∞—Å—Ç–æ –±–µ—Ä–µ—Ç–µ –Ω–∞ —Å–µ–±—è –ª–∏—à–Ω—é—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.""",
                    "strengths": "–í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å, –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å",
                    "weaknesses": "–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞, —Å—Ç—Ä–µ—Å—Å",
                    "development": "–£—á–∏—Ç–µ—Å—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å"
                },
                4: {
                    "attitude": "–ì–∏–ø–µ—Ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
                    "analysis": """–ß—Ä–µ–∑–º–µ—Ä–Ω–æ —Ä–∞–∑–≤–∏—Ç–æ–µ —á—É–≤—Å—Ç–≤–æ –¥–æ–ª–≥–∞. –ë–µ—Ä–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤—Å–µ—Ö –∏ –≤—Å—è.""",
                    "strengths": "–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å",
                    "weaknesses": "–í—ã–≥–æ—Ä–∞–Ω–∏–µ, –º—É—á–µ–Ω–∏—á–µ—Å—Ç–≤–æ",
                    "development": "–£—á–∏—Ç–µ—Å—å –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ"
                }
            }
            
            duty_data = duty_interpretations.get(duty, duty_interpretations[2])
            text += f"   üéØ *–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥–æ–ª–≥—É:* {duty_data['attitude']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {duty_data['analysis']}\n"
            text += f"   ‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:* {duty_data['strengths']}\n"
            text += f"   ‚ùå *–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:* {duty_data['weaknesses']}\n"
            text += f"   üí° *–†–∞–∑–≤–∏—Ç–∏–µ:* {duty_data['development']}\n\n"

            # –ü–ê–ú–Ø–¢–¨ –ò –ò–ù–¢–ï–õ–õ–ï–ö–¢ (9)
            memory = psychomatrix.get('9', 0)
            text += "üìö *9. –ü–ê–ú–Ø–¢–¨, –£–ú –ò –≠–†–£–î–ò–¶–ò–Ø*\n"
            
            memory_interpretations = {
                0: {
                    "type": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É–º",
                    "analysis": """–ü–∞–º—è—Ç—å —Å–ª–∞–±–∞—è, –Ω–æ —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –¥–µ–ª–∞.""",
                    "strengths": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π",
                    "weaknesses": "–ü–ª–æ—Ö–∞—è –ø–∞–º—è—Ç—å, –∑–∞–±—ã–≤—á–∏–≤–æ—Å—Ç—å",
                    "development": "–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–∞–º—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏"
                },
                1: {
                    "type": "–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å",
                    "analysis": """–•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å –Ω–∞ –≤–∞–∂–Ω–æ–µ, –Ω–æ –º–æ–∂–µ—Ç–µ –∑–∞–±—ã–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.""",
                    "strengths": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
                    "weaknesses": "–ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö",
                    "development": "–†–∞—Å—à–∏—Ä—è–π—Ç–µ –∫—Ä—É–≥–æ–∑–æ—Ä"
                },
                2: {
                    "type": "–•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å", 
                    "analysis": """–•–æ—Ä–æ—à–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é –∏ –æ–±—É—á–µ–Ω–∏—é. –ë—ã—Å—Ç—Ä–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.""",
                    "strengths": "–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ, —ç—Ä—É–¥–∏—Ü–∏—è",
                    "weaknesses": "–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
                    "development": "–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –∑–Ω–∞–Ω–∏—è"
                },
                3: {
                    "type": "–û—Ç–ª–∏—á–Ω–∞—è –ø–∞–º—è—Ç—å",
                    "analysis": """–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–∞–º—è—Ç—å –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –ú–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏.""",
                    "strengths": "–ì–ª—É–±–æ–∫–∏–µ –∑–Ω–∞–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —É–º",
                    "weaknesses": "–ò–∑–ª–∏—à–Ω—è—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å",
                    "development": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
                },
                4: {
                    "type": "–§–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å",
                    "analysis": """–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é –∏ –∞–Ω–∞–ª–∏–∑—É. –ú–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å –≤–µ—Ä—à–∏–Ω –≤ –Ω–∞—É–∫–µ –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ.""",
                    "strengths": "–≠–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è, –≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç—å",
                    "weaknesses": "–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏ —Å –æ–±—ã—á–Ω—ã–º–∏ –ª—é–¥—å–º–∏",
                    "development": "–£—á–∏—Ç–µ—Å—å –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω–æ–µ"
                }
            }
            
            memory_data = memory_interpretations.get(memory, memory_interpretations[2])
            text += f"   üß† *–¢–∏–ø –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:* {memory_data['type']}\n"
            text += f"   üìù *–ê–Ω–∞–ª–∏–∑:* {memory_data['analysis']}\n"
            text += f"   ‚úÖ *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:* {memory_data['strengths']}\n"
            text += f"   ‚ùå *–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:* {memory_data['weaknesses']}\n"
            text += f"   üí° *–†–∞–∑–≤–∏—Ç–∏–µ:* {memory_data['development']}\n\n"

            # –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
            text += "üåü *–û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò*\n\n"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
            strong_numbers = [k for k, v in psychomatrix.items() if v >= 3]
            weak_numbers = [k for k, v in psychomatrix.items() if v == 0]
            
            if strong_numbers:
                text += "‚úÖ *–í–ê–®–ò –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:*\n"
                for num in strong_numbers:
                    strengths = {
                        '1': "‚Ä¢ –°–∏–ª—å–Ω–∞—è –≤–æ–ª—è –∏ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
                        '2': "‚Ä¢ –•–æ—Ä–æ—à–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", 
                        '3': "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
                        '4': "‚Ä¢ –ö—Ä–µ–ø–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –∂–∏–∑–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å",
                        '5': "‚Ä¢ –†–∞–∑–≤–∏—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–ª–∏ –∏–Ω—Ç—É–∏—Ü–∏—è",
                        '6': "‚Ä¢ –¢—Ä—É–¥–æ–ª—é–±–∏–µ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ",
                        '7': "‚Ä¢ –£–¥–∞—á–∞ –∏ –≤–µ–∑–µ–Ω–∏–µ",
                        '8': "‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å",
                        '9': "‚Ä¢ –•–æ—Ä–æ—à–∞—è –ø–∞–º—è—Ç—å –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
                    }
                    text += f"{strengths.get(num, '‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏')}\n"
                text += "\n"
            
            if weak_numbers:
                text += "‚ö†Ô∏è *–ó–û–ù–´ –†–û–°–¢–ê:*\n"
                for num in weak_numbers:
                    recommendations = {
                        '1': "‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ, —É—á–∏—Ç–µ—Å—å –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ",
                        '2': "‚Ä¢ –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏, —Å–ø–æ—Ä—Ç–æ–º",
                        '3': "‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                        '4': "‚Ä¢ –£–¥–µ–ª—è–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—é, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –∏ —Ä–µ–∂–∏–º—É",
                        '5': "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏—é",
                        '6': "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç–µ —Ä–∞–¥–æ—Å—Ç—å –≤ —Ç—Ä—É–¥–µ, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏", 
                        '7': "‚Ä¢ –£—á–∏—Ç–µ—Å—å –≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
                        '8': "‚Ä¢ –ë–µ—Ä–∏—Ç–µ –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –æ–±–µ—â–∞–Ω–∏—è",
                        '9': "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø–∞–º—è—Ç—å, —á–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏, —É—á–∏—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ"
                    }
                    text += f"{recommendations.get(num, '‚Ä¢ –ì–∞—Ä–º–æ–Ω–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏')}\n"
                text += "\n"
            
            # –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            text += "üìñ *–ö–ê–†–ú–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:*\n"
            karmic_tasks = []
            
            if psychomatrix.get('1', 0) == 0:
                karmic_tasks.append("‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã")
            if psychomatrix.get('2', 0) == 0:
                karmic_tasks.append("‚Ä¢ –ù–∞—É—á–∏—Ç—å—Å—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é")
            if psychomatrix.get('3', 0) == 0:
                karmic_tasks.append("‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –∑–Ω–∞–Ω–∏—è–º")
            if psychomatrix.get('4', 0) == 0:
                karmic_tasks.append("‚Ä¢ –£–∫—Ä–µ–ø–ª—è—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ü–µ–Ω–∏—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ")
            if psychomatrix.get('5', 0) == 0:
                karmic_tasks.append("‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ª–æ–≥–∏–∫–æ–π –∏ –∏–Ω—Ç—É–∏—Ü–∏–µ–π")
            if psychomatrix.get('6', 0) == 0:
                karmic_tasks.append("‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å —Ä–∞–¥–æ—Å—Ç—å –≤ —Ç—Ä—É–¥–µ –∏ —Å–ª—É–∂–µ–Ω–∏–∏")
            if psychomatrix.get('7', 0) == 0:
                karmic_tasks.append("‚Ä¢ –£—á–∏—Ç—å—Å—è –≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ–≤–µ—Ä—è—Ç—å –∂–∏–∑–Ω–∏")
            if psychomatrix.get('8', 0) == 0:
                karmic_tasks.append("‚Ä¢ –†–∞–∑–≤–∏–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º–∏")
            if psychomatrix.get('9', 0) == 0:
                karmic_tasks.append("‚Ä¢ –°—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é")
            
            if not karmic_tasks:
                karmic_tasks.append("‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –≤ –∏—Ö —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏")
            
            text += "\n".join(karmic_tasks)
            text += "\n\n"
            
            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            text += "üí´ *–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:*\n"
            text += f"–ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ {name} –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤, "
            text += "–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É—Å–ø–µ—Ö—É –∏ –≥–∞—Ä–º–æ–Ω–∏–∏. "
            text += "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —Ü–∏—Ñ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –∞ –µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—Å!\n\n"
            
            text += "‚ú® *–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –±–æ—Ç–æ–º [–ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞](https://t.me/pythagoras_cube_bot)*"
            
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
            return text
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ get_detailed_interpretation(): {e}")
            import traceback
            traceback.print_exc()
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–û—à–∏–±–∫–∞: {str(e)}"

    def calculate_compatibility(self, psychomatrix1, psychomatrix2, name1, name2):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        
        text = f"üíû *–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò: {name1.upper()} –ò {name2.upper()}*\n\n"
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        total_score = 0
        max_score = 27
        
        # 1. –•–ê–†–ê–ö–¢–ï–†
        char1 = psychomatrix1.get('1', 0)
        char2 = psychomatrix2.get('1', 0)
        char_compat = self._calculate_character_compatibility(char1, char2)
        total_score += char_compat
        
        text += "üé≠ *1. –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –•–ê–†–ê–ö–¢–ï–†–û–í*\n"
        text += f"   {name1}: {self._get_character_description(char1)}\n"
        text += f"   {name2}: {self._get_character_description(char2)}\n"
        
        if char_compat >= 8:
            text += "   ‚úÖ *–ò–î–ï–ê–õ–¨–ù–û–ï –°–û–ß–ï–¢–ê–ù–ò–ï!*\n"
            text += "   –í—ã –∏–¥–µ–∞–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω—è–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞! –û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º—è–≥–∫–æ—Å—Ç—å –∏ –≥–∞—Ä–º–æ–Ω–∏—é, –¥—Ä—É–≥–æ–π - —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–∏–ª—É. –¢–∞–∫–æ–π —Å–æ—é–∑ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –æ—á–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º.\n\n"
        elif char_compat >= 5:
            text += "   ‚ö†Ô∏è *–•–û–†–û–®–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨*\n"
            text += "   –í —Ü–µ–ª–æ–º –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π —Å–æ—é–∑. –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è, –Ω–æ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º —É–≤–∞–∂–µ–Ω–∏–∏ –æ–Ω–∏ –ª–µ–≥–∫–æ —Ä–µ—à–∞—é—Ç—Å—è. –ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—á–≤–∞ –¥–ª—è —Ä–æ—Å—Ç–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π.\n\n"
        else:
            text += "   ‚ùå *–°–õ–û–ñ–ù–û–ï –°–û–ß–ï–¢–ê–ù–ò–ï*\n"
            text += "   –í–æ–∑–º–æ–∂–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–∑-–∑–∞ —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏, —É–º–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç—å –∏ –∏–¥—Ç–∏ –Ω–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã.\n\n"
        
        # 2. –≠–ù–ï–†–ì–ò–Ø
        energy1 = psychomatrix1.get('2', 0)
        energy2 = psychomatrix2.get('2', 0)
        energy_compat = self._calculate_energy_compatibility(energy1, energy2)
        total_score += energy_compat
        
        text += "‚ö° *2. –≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨*\n"
        text += f"   {name1}: {self._get_energy_description(energy1)}\n"
        text += f"   {name2}: {self._get_energy_description(energy2)}\n"
        
        if energy_compat >= 8:
            text += "   ‚úÖ *–û–¢–õ–ò–ß–ù–´–ô –≠–ù–ï–†–ì–û–û–ë–ú–ï–ù!*\n"
            text += "   –í—ã –∑–∞—Ä—è–∂–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π! –û—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞–ø–æ–ª–Ω–µ–Ω—ã —Å—Ç—Ä–∞—Å—Ç—å—é –∏ –≤–∑–∞–∏–º–Ω—ã–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—é–∑–∞.\n\n"
        elif energy_compat >= 5:
            text += "   ‚ö†Ô∏è *–°–¢–ê–ë–ò–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–°*\n"
            text += "   –≠–Ω–µ—Ä–≥–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ü–∞—Ä—Ç–Ω–µ—Ä—ã –Ω–µ –∏—Å—Ç–æ—â–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –∑–¥–æ—Ä–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —Å–∏–ª. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å.\n\n"
        else:
            text += "   ‚ùå *–≠–ù–ï–†–ì–ï–¢–ò–ß–ï–°–ö–ò–ô –î–ò–°–ë–ê–õ–ê–ù–°*\n"
            text += "   –û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä –º–æ–∂–µ—Ç –∏—Å—Ç–æ—â–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ. –í–∞–∂–Ω–æ –¥–∞–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —É—á–∏—Ç—å—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ —É–≤–∞–∂–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n\n"
        
        # 3. –ò–ù–¢–ï–†–ï–°–´
        int1 = psychomatrix1.get('3', 0)
        int2 = psychomatrix2.get('3', 0)
        int_compat = self._calculate_interests_compatibility(int1, int2)
        total_score += int_compat
        
        text += "üî¨ *3. –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨*\n"
        text += f"   {name1}: {self._get_interests_description(int1)}\n"
        text += f"   {name2}: {self._get_interests_description(int2)}\n"
        
        if int_compat >= 8:
            text += "   ‚úÖ *–ò–î–ï–ê–õ–¨–ù–û–ï –°–û–ß–ï–¢–ê–ù–ò–ï!*\n"
            text += "   –í–∞–º –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–≤–∞–µ—Ç —Å–∫—É—á–Ω–æ –≤–º–µ—Å—Ç–µ! –ú–æ–∂–µ—Ç–µ —á–∞—Å–∞–º–∏ –æ–±—Å—É–∂–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã, –¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—à–µ–Ω–∏—è.\n\n"
        elif int_compat >= 5:
            text += "   ‚ö†Ô∏è *–†–ê–ó–ù–´–ï, –ù–û –î–û–ü–û–õ–ù–Ø–Æ–©–ò–ï*\n"
            text += "   –í—ã –º–æ–∂–µ—Ç–µ —É—á–∏—Ç—å—Å—è –¥—Ä—É–≥ —É –¥—Ä—É–≥–∞ –Ω–æ–≤–æ–º—É. –†–∞–∑–Ω–∏—Ü–∞ –≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –≤–∑–∞–∏–º–Ω–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–±–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –Ω–æ–≤–æ–º—É.\n\n"
        else:
            text += "   ‚ùå *–°–õ–û–ñ–ù–û–°–¢–ò –í –û–ë–©–ï–ù–ò–ò*\n"
            text += "   –†–∞–∑–Ω—ã–µ –≤–∑–≥–ª—è–¥—ã –Ω–∞ –∂–∏–∑–Ω—å –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ. –í–∞–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–µ —Ç–µ–º—ã, —É–≤–∞–∂–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –∏ —É—á–∏—Ç—å—Å—è –ø–æ–Ω–∏–º–∞—Ç—å –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n\n"
        
        # –û–ë–©–ò–ô –ü–†–û–¶–ï–ù–¢
        compatibility_percent = (total_score / max_score) * 100
        
        text += f"üìä *–û–ë–©–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: {compatibility_percent:.0f}%*\n\n"
        
        if compatibility_percent >= 80:
            text += "üåü *–í–´–°–û–ö–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨!*\n"
            text += "–≠—Ç–æ—Ç —Å–æ—é–∑ –∏–º–µ–µ—Ç –≤—Å–µ —à–∞–Ω—Å—ã —Å—Ç–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º, —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω—ã–º! –í—ã –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n"
        elif compatibility_percent >= 60:
            text += "üí´ *–•–û–†–û–®–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨*\n"
            text += "–û—Ç–Ω–æ—à–µ–Ω–∏—è –æ—á–µ–Ω—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ! –ü—Ä–∏ –≤–∑–∞–∏–º–Ω—ã—Ö —É—Å–∏–ª–∏—è—Ö –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫—Ä–µ–ø–∫–∏–π –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–π —Å–æ—é–∑. –†–∞–±–æ—Ç–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –Ω–∞–¥ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏.\n\n"
        elif compatibility_percent >= 40:
            text += "‚öñÔ∏è *–°–†–ï–î–ù–Ø–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨*\n"
            text += "–û—Ç–Ω–æ—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã, –Ω–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ —Å–æ–±–æ–π –∏ –≤–∑–∞–∏–º–Ω—ã—Ö —É—Å—Ç—É–ø–æ–∫. –í–∞–∂–Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º–∏ –∫ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–∞–º –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.\n\n"
        else:
            text += "üíî *–ù–ò–ó–ö–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨*\n"
            text += "–°–æ—é–∑ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω—ã–º –∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–∞–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏–ª–∏ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º–∏ –∫ –±–æ–ª—å—à–∏–º —É—Å–∏–ª–∏—è–º.\n\n"
        
        # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        text += "üí° *–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–ê–†–´:*\n\n"
        
        if char1 == 0 and char2 >= 2:
            text += "üé≠ *–ü–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É:*\n"
            text += f"‚Ä¢ {name2} - –±—É–¥—å—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–∞–∫—Ç–∏—á–Ω—ã, –Ω–µ –ø–æ–¥–∞–≤–ª—è–π—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
            text += f"‚Ä¢ {name1} - —É—á–∏—Ç–µ—Å—å –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã –∏ –≤—ã—Ä–∞–∂–∞—Ç—å –º–Ω–µ–Ω–∏–µ\n"
            text += "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: —Å–∏–ª–∞ + –≥–∞—Ä–º–æ–Ω–∏—è = –±–∞–ª–∞–Ω—Å\n\n"
        elif char2 == 0 and char1 >= 2:
            text += "üé≠ *–ü–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É:*\n"
            text += f"‚Ä¢ {name1} - –±—É–¥—å—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–∞–∫—Ç–∏—á–Ω—ã, –Ω–µ –ø–æ–¥–∞–≤–ª—è–π—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
            text += f"‚Ä¢ {name2} - —É—á–∏—Ç–µ—Å—å –æ—Ç—Å—Ç–∞–∏–≤–∞—Ç—å —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã\n"
            text += "‚Ä¢ –ë–∞–ª–∞–Ω—Å —Å–∏–ª—ã –∏ –º—è–≥–∫–æ—Å—Ç–∏ - –∫–ª—é—á –∫ –≥–∞—Ä–º–æ–Ω–∏–∏\n\n"
        
        if energy1 == 0 or energy2 == 0:
            text += "‚ö° *–ü–æ —ç–Ω–µ—Ä–≥–∏–∏:*\n"
            text += "‚Ä¢ –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏ —Å–ª–∞–±–æ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É - –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞ –∏ —É–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            text += "‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤—è—Ç –±–∞–ª–∞–Ω—Å\n"
            text += "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ —à—É–º–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
        
        if int1 != int2:
            text += "üî¨ *–ü–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º:*\n"
            text += "‚Ä¢ –£–≤–∞–∂–∞–π—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –≤ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö - —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ\n"
            text += "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç–µ –æ–±—â–∏–µ —Ö–æ–±–±–∏ –∏ –∑–∞–Ω—è—Ç–∏—è\n"
            text += "‚Ä¢ –£—á–∏—Ç–µ—Å—å —Å–ª—É—à–∞—Ç—å –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –º–∏—Ä–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n\n"
        
        text += "üå± *–û–ë–©–ò–ï –°–û–í–ï–¢–´ –ü–û –†–ê–ó–í–ò–¢–ò–Æ –û–¢–ù–û–®–ï–ù–ò–ô:*\n"
        text += "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ –Ω–∞–µ–¥–∏–Ω–µ\n"
        text += "‚Ä¢ –£—á–∏—Ç–µ—Å—å –≤—ã—Ä–∞–∂–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ appreciation\n"
        text += "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏\n"
        text += "‚Ä¢ –ù–µ –±–æ–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å–µ–º–µ–π–Ω–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
        text += "‚Ä¢ –ü–æ–º–Ω–∏—Ç–µ: –∏–¥–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å—Ç—å work in progress\n\n"
        
        text += "\n‚ú® –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –±–æ—Ç–æ–º [–ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞](https://t.me/pythagoras_cube_bot)"
        
        return text
    
    def _get_character_description(self, char):
        descriptions = {
            0: "–ú—è–≥–∫–∏–π, —É—Å—Ç—É–ø—á–∏–≤—ã–π, –±–µ–∑–≤–æ–ª—å–Ω—ã–π",
            1: "–£—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π, —Ç–∞–∫—Ç–∏—á–Ω—ã–π, –≥–∏–±–∫–∏–π", 
            2: "–°–∏–ª—å–Ω—ã–π, —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π, –ª–∏–¥–µ—Ä",
            3: "–í–æ–ª–µ–≤–æ–π, —É–ø—Ä—è–º—ã–π, –¥–∏–∫—Ç–∞—Ç–æ—Ä",
            4: "–¢–∏—Ä–∞–Ω–∏—á–µ—Å–∫–∏–π, –¥–µ—Å–ø–æ—Ç–∏—á–Ω—ã–π"
        }
        return descriptions.get(char, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    
    def _get_energy_description(self, energy):
        descriptions = {
            0: "–°–ª–∞–±–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, –≤–∞–º–ø–∏—Ä",
            1: "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, –¥–æ–Ω–æ—Ä",
            2: "–•–æ—Ä–æ—à–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π",
            3: "–°–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, —Ü–µ–ª–∏—Ç–µ–ª—å",
            4: "–ú–æ—â–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞, —ç–∫—Å—Ç—Ä–∞—Å–µ–Ω—Å"
        }
        return descriptions.get(energy, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    
    def _get_interests_description(self, interests):
        descriptions = {
            0: "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π —Å–∫–ª–∞–¥ —É–º–∞",
            1: "–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–∫–ª–æ–Ω–Ω–æ—Å—Ç—è–º–∏", 
            2: "–ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π —É–º",
            3: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–º–∏ –Ω–∞–∫–ª–æ–Ω–Ω–æ—Å—Ç—è–º–∏",
            4: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞"
        }
        return descriptions.get(interests, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    
    def _calculate_character_compatibility(self, char1, char2):
        if (char1 == 1 and char2 == 2) or (char1 == 2 and char2 == 1):
            return 9
        elif char1 == 1 and char2 == 1:
            return 8
        elif (char1 == 0 and char2 == 2) or (char1 == 2 and char2 == 0):
            return 7
        elif (char1 == 0 and char2 == 1) or (char1 == 1 and char2 == 0):
            return 6
        elif char1 == 0 and char2 == 0:
            return 3
        elif char1 == 2 and char2 == 2:
            return 2
        else:
            return 5
    
    def _calculate_energy_compatibility(self, energy1, energy2):
        if (energy1 == 2 and energy2 == 1) or (energy1 == 1 and energy2 == 2):
            return 9
        elif energy1 == 2 and energy2 == 2:
            return 8
        elif energy1 == 1 and energy2 == 1:
            return 7
        elif (energy1 == 2 and energy2 == 0) or (energy1 == 0 and energy2 == 2):
            return 6
        elif energy1 == 0 and energy2 == 0:
            return 2
        elif (energy1 == 0 and energy2 == 1) or (energy1 == 1 and energy2 == 0):
            return 4
        else:
            return 5
    
    def _calculate_interests_compatibility(self, int1, int2):
        if int1 == int2:
            return 9
        elif int1 == 3 or int2 == 3:
            return 8
        elif (int1 == 1 and int2 == 2) or (int1 == 2 and int2 == 1):
            return 4
        else:
            return 6

class UserStats:
    def __init__(self):
        self.stats = self.load_stats()
    
    def load_stats(self):
        try:
            with open(USER_STATS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if 'user_calculations' in data:
                    data['user_calculations'] = defaultdict(int, data['user_calculations'])
                return data
        except FileNotFoundError:
            return {
                'total_users': 0,
                'active_today': 0,
                'calculations_today': 0,
                'calculations_total': 0,
                'compatibility_total': 0,
                'user_calculations': defaultdict(int),
                'last_reset': datetime.now().strftime('%Y-%m-%d')
            }
    
    def get_calculations_left(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä–∞—Å—á–µ—Ç–æ–≤"""
        ADMIN_IDS = [5917286646, 1698403624]
        if user_id in ADMIN_IDS:
            return 999
        user_calcs = self.stats['user_calculations'].get(str(user_id), 0)
        return max(0, MAX_CALCULATIONS - user_calcs)
    
    def can_make_calculation(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç"""
        ADMIN_IDS = [5917286646, 1698403624]
        if user_id in ADMIN_IDS:
            return True
        return self.get_calculations_left(user_id) > 0
    
    def add_referral_bonus(self, user_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
        current_calcs = self.stats['user_calculations'].get(str(user_id), 0)
        self.stats['user_calculations'][str(user_id)] = max(0, current_calcs - 2)
        self.save_stats()
    
    def save_stats(self):
        with open(USER_STATS_FILE, 'w', encoding='utf-8') as f:
            stats_to_save = self.stats.copy()
            stats_to_save['user_calculations'] = dict(self.stats['user_calculations'])
            json.dump(stats_to_save, f, ensure_ascii=False, indent=2)
    
    def reset_daily_stats(self):
        today = datetime.now().strftime('%Y-%m-%d')
        if self.stats['last_reset'] != today:
            self.stats['active_today'] = 0
            self.stats['calculations_today'] = 0
            self.stats['last_reset'] = today
            self.save_stats()
    
    def add_user(self, user_id, username):
        self.reset_daily_stats()
        
        if str(user_id) not in self.stats['user_calculations']:
            self.stats['total_users'] += 1
            self.stats['active_today'] += 1
        
        if str(user_id) not in self.stats['user_calculations']:
            self.stats['user_calculations'][str(user_id)] = 0
        
        self.save_stats()
    
    def add_calculation(self, user_id, calculation_type="personal"):
        self.reset_daily_stats()
        
        self.stats['calculations_total'] += 1
        self.stats['calculations_today'] += 1
        self.stats['user_calculations'][str(user_id)] = self.stats['user_calculations'].get(str(user_id), 0) + 1
        
        if calculation_type == "compatibility":
            self.stats['compatibility_total'] += 1
        
        self.save_stats()
    
    def get_stats(self):
        self.reset_daily_stats()
        return self.stats
    
    def get_user_stats(self, user_id):
        user_calcs = self.stats['user_calculations'].get(str(user_id), 0)
        return {
            'user_calculations': user_calcs,
            'calculations_left': self.get_calculations_left(user_id),
            'rank': self.get_user_rank(user_id)
        }
    
    def get_user_rank(self, user_id):
        user_calcs = self.stats['user_calculations'].get(str(user_id), 0)
        all_calcs = sorted(self.stats['user_calculations'].values(), reverse=True)
        
        try:
            rank = all_calcs.index(user_calcs) + 1
            total_users = len(all_calcs)
            return f"{rank}/{total_users}"
        except ValueError:
            return "–ù/–î"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_stats = UserStats()

class ReferralSystem:
    def __init__(self):
        self.referral_data = self.load_referral_data()
    
    def load_referral_data(self):
        try:
            with open(REFERRAL_LINKS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return {}
    
    def save_referral_data(self):
        with open(REFERRAL_LINKS_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.referral_data, f, ensure_ascii=False, indent=2)
    
    def generate_referral_link(self, user_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
        code = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))
        self.referral_data[code] = {
            'user_id': user_id,
            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'used_by': [],
            'uses_count': 0
        }
        self.save_referral_data()
        return f"https://t.me/{BOT_USERNAME}?start=ref_{code}"
    
    def get_user_referral_link(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for code, data in self.referral_data.items():
            if data['user_id'] == user_id:
                return f"https://t.me/{BOT_USERNAME}?start=ref_{code}"
        return self.generate_referral_link(user_id)
    
    def get_referral_code_by_user(self, user_id):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for code, data in self.referral_data.items():
            if data['user_id'] == user_id:
                return code
        return None
    
    def use_referral_link(self, code, new_user_id):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        if code in self.referral_data:
            if new_user_id not in self.referral_data[code]['used_by']:
                self.referral_data[code]['used_by'].append(new_user_id)
                self.referral_data[code]['uses_count'] += 1
                self.save_referral_data()
                return True
        return False
    
    def get_referral_stats(self, user_id):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        code = self.get_referral_code_by_user(user_id)
        if code and code in self.referral_data:
            data = self.referral_data[code]
            return {
                'link': f"https://t.me/{BOT_USERNAME}?start=ref_{code}",
                'uses_count': data['uses_count'],
                'referrals': len(data['used_by']),
                'code': code
            }
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
referral_system = ReferralSystem()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
MAIN_MENU = 0
WAITING_SELF_NAME = 1
WAITING_SELF_DATE = 2
WAITING_PARTNER1_NAME = 3
WAITING_PARTNER1_DATE = 4
WAITING_PARTNER2_NAME = 5
WAITING_PARTNER2_DATE = 6

user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    if context.args and context.args[0].startswith('ref_'):
        ref_code = context.args[0][4:]
        
        if referral_system.use_referral_link(ref_code, user.id):
            ref_owner_id = referral_system.referral_data[ref_code]['user_id']
            user_stats.add_referral_bonus(ref_owner_id)
            
            await update.message.reply_text(
                "üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! "
                "–í–ª–∞–¥–µ–ª–µ—Ü —Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã."
            )
    
    keyboard = [
        [InlineKeyboardButton("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É", callback_data="self_calculation")],
        [InlineKeyboardButton("üíû –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="compatibility_calculation")],
        [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üßÆ *–ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞* - –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è –¥–ª—è:\n"
        "‚úîÔ∏è –ü–æ–Ω–∏–º–∞–Ω–∏—è —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω\n" 
        "‚úîÔ∏è –†–∞—Å–∫—Ä—ã—Ç–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤\n"
        "‚úîÔ∏è –ê–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏\n"
        "‚úîÔ∏è –ü–æ–∏—Å–∫–∞ —Å–≤–æ–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    user_states[user.id] = MAIN_MENU

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    if query.data == "self_calculation":
        if not user_stats.can_make_calculation(user.id):
            keyboard = [
                [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "‚ùå *–õ–∏–º–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"
                "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã. "
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç–æ–≤:\n\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n"
                "2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n"
                "3. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +2 —Ä–∞—Å—á–µ—Ç–∞\n\n"
                "–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            return
            
        await query.message.reply_text(
            "üîÆ *–†–ê–°–ß–ï–¢ –í–ê–®–ï–ì–û –ö–í–ê–î–†–ê–¢–ê –ü–ò–§–ê–ì–û–†–ê*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            parse_mode='Markdown'
        )
        user_states[user.id] = WAITING_SELF_NAME
        
    elif query.data == "compatibility_calculation":
        if not user_stats.can_make_calculation(user.id):
            keyboard = [
                [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "‚ùå *–õ–∏–º–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"
                "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã. "
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç–æ–≤:\n\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n"
                "2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n"
                "3. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +2 —Ä–∞—Å—á–µ—Ç–∞\n\n"
                "–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            return
            
        await query.message.reply_text(
            "üíû *–†–ê–°–ß–ï–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:",
            parse_mode='Markdown'
        )
        user_states[user.id] = WAITING_PARTNER1_NAME

    elif query.data == "personal_cabinet":
        await show_personal_cabinet(update, context)
        
    elif query.data == "new_calculation":
        if not user_stats.can_make_calculation(user.id):
            keyboard = [
                [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "‚ùå *–õ–∏–º–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"
                "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã. "
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç–æ–≤:\n\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n"
                "2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n"
                "3. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +2 —Ä–∞—Å—á–µ—Ç–∞\n\n"
                "–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            return
            
        await query.message.reply_text(
            "üîÑ *–ù–û–í–´–ô –†–ê–°–ß–ï–¢*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            parse_mode='Markdown'
        )
        user_states[user.id] = WAITING_SELF_NAME
        
    elif query.data == "back_to_menu":
        keyboard = [
            [InlineKeyboardButton("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç—É", callback_data="self_calculation")],
            [InlineKeyboardButton("üíû –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="compatibility_calculation")],
            [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "üßÆ *–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        user_states[user.id] = MAIN_MENU

async def show_personal_cabinet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    calculations_left = user_stats.get_calculations_left(user.id)
    user_calcs = user_stats.stats['user_calculations'].get(str(user.id), 0)
    referral_stats = referral_system.get_referral_stats(user.id)
    
    text = f"üë§ *–õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢* {user.first_name}\n\n"
    
    text += f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
    text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–∞—Å—á–µ—Ç–æ–≤: {user_calcs}/{MAX_CALCULATIONS}\n"
    text += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å—á–µ—Ç–æ–≤: {calculations_left}\n\n"
    
    if referral_stats:
        text += f"üîó *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*\n"
        text += f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referral_stats['referrals']}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å—Å—ã–ª–∫–∏: {referral_stats['uses_count']}\n\n"
        
        text += f"üìé *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n"
        text += f"`{referral_stats['link']}`\n\n"
    else:
        ref_link = referral_system.get_user_referral_link(user.id)
        text += f"üìé *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n"
        text += f"`{ref_link}`\n\n"
    
    text += "üí° *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç–æ–≤:*\n"
    text += "1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n"
    text += "2. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +2 —Ä–∞—Å—á–µ—Ç–∞\n"
    text += "3. –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤!\n\n"
    
    text += "üì¢ *–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π:*"
    
    share_link = referral_stats['link'] if referral_stats else referral_system.get_user_referral_link(user.id)
    keyboard = [
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
                             url=f"https://t.me/share/url?url={share_link}&text=üîÆ –†–∞—Å—Å—á–∏—Ç–∞–π —Å–≤–æ–π –ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞ –∏ —É–∑–Ω–∞–π –≤—Å–µ —Ç–∞–π–Ω—ã –ª–∏—á–Ω–æ—Å—Ç–∏!")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)

async def handle_self_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    name = update.message.text
    
    print(f"üîç –û–ë–†–ê–ë–û–¢–ö–ê –ò–ú–ï–ù–ò:")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
    print(f"   üìõ –í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è: {name}")
    
    context.user_data['self_name'] = name
    user_states[user.id] = WAITING_SELF_DATE
    print(f"   ‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ WAITING_SELF_DATE")
    
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {name}! ‚ú®\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–î–î.–ú–ú.–ì–ì–ì–ì*\n"
        "–ü—Ä–∏–º–µ—Ä: 15.09.1990",
        parse_mode='Markdown'
    )

async def handle_self_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    birth_date = update.message.text.strip()
    
    print(f"üîç –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–¢–´:")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
    print(f"   üìÖ –í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {birth_date}")
    print(f"   üìõ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è: {context.user_data.get('self_name', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
    
    if not user_stats.can_make_calculation(user.id):
        print(f"   ‚ùå –õ–∏–º–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        keyboard = [
            [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå *–õ–∏–º–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"
            "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã. "
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç–æ–≤:\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n"
            "2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n"
            "3. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +2 —Ä–∞—Å—á–µ—Ç–∞\n\n"
            "–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
        
    # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        print(f"   üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã: {birth_date}")
        
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        birth_date = birth_date.replace(' ', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if '.' in birth_date:
            parts = birth_date.split('.')
        elif '/' in birth_date:
            parts = birth_date.split('/')
        elif '-' in birth_date:
            parts = birth_date.split('-')
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –¥–∞—Ç–µ: {birth_date}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09.1990)\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        if len(parts) != 3:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –≤ –¥–∞—Ç–µ: {parts}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—Ä–∏ —á–∞—Å—Ç–∏: –¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥\n"
                "–ü—Ä–∏–º–µ—Ä: 15.09.1990\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        day, month, year = parts
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥
        formatted_date = f"{int(day):02d}.{int(month):02d}.{year}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        datetime.strptime(formatted_date, '%d.%m.%Y')
        
        print(f"   ‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞: {formatted_date}")
        
    except (ValueError, Exception) as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∞—Ç–∞!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: 15.09.1990\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    name = context.user_data['self_name']
    print(f"   ‚úÖ –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—á–µ—Ç
    user_stats.add_user(user.id, user.username)
    user_stats.add_calculation(user.id, "personal")
    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO users (user_id, username, name, birth_date) VALUES (?, ?, ?, ?)',
                  (user.id, user.username, name, formatted_date))
    conn.commit()
    conn.close()
    print(f"   üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É: {user.id}, {name}, {formatted_date}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    processing_msg = await update.message.reply_text(
        "üîÆ *–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à –ö–≤–∞–¥—Ä–∞—Ç –ü–∏—Ñ–∞–≥–æ—Ä–∞...*\n"
        "‚è≥ *–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 20-25 —Å–µ–∫—É–Ω–¥*",
        parse_mode='Markdown'
    )
    
    print(f"   ‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞...")
    
    # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    await asyncio.sleep(5)
    await processing_msg.edit_text("üîÆ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–∏—Ñ—Ä—ã —Å—É–¥—å–±—ã...*")
    await asyncio.sleep(5)
    await processing_msg.edit_text("üîÆ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã...*")
    await asyncio.sleep(5)
    await processing_msg.edit_text("üîÆ *–°–æ—Å—Ç–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É...*")
    await asyncio.sleep(5)
    
    # –†–∞—Å—á–µ—Ç
    cube = PythagorasCube(formatted_date)
    psychomatrix = cube.calculate()
    result = cube.get_detailed_interpretation(psychomatrix, name)
    
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=processing_msg.message_id)
    print(f"   ‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")],
        [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(result, parse_mode='Markdown', reply_markup=reply_markup)
    user_states[user.id] = MAIN_MENU
    print(f"   üèÅ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ MAIN_MENU")

async def handle_partner1_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    name = update.message.text
    
    context.user_data['partner1_name'] = name
    user_states[user.id] = WAITING_PARTNER1_DATE
    
    await update.message.reply_text(
        f"–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è *{name}* –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        parse_mode='Markdown'
    )

async def handle_partner1_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    birth_date = update.message.text
    
    try:
        datetime.strptime(birth_date, '%d.%m.%Y')
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='Markdown'
        )
        return
    
    context.user_data['partner1_date'] = birth_date
    user_states[user.id] = WAITING_PARTNER2_NAME
    
    await update.message.reply_text(
        "üíû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:",
        parse_mode='Markdown'
    )

async def handle_partner2_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    name = update.message.text
    
    context.user_data['partner2_name'] = name
    user_states[user.id] = WAITING_PARTNER2_DATE
    
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è *{name}* –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        parse_mode='Markdown'
    )

async def handle_partner2_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    if not user_stats.can_make_calculation(user.id):
        keyboard = [
            [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå *–õ–∏–º–∏—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"
            "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–æ–≤. "
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞—Å—á–µ—Ç–æ–≤:\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n"
            "2. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n"
            "3. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –ø–æ–ª—É—á–∏—Ç–µ +2 —Ä–∞—Å—á–µ—Ç–∞\n\n"
            "–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
        
    birth_date = update.message.text
    
    try:
        datetime.strptime(birth_date, '%d.%m.%Y')
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode='Markdown'
        )
        return
    
    partner1_name = context.user_data['partner1_name']
    partner1_date = context.user_data['partner1_date']
    partner2_name = context.user_data['partner2_name']
    partner2_date = birth_date

    user_stats.add_user(user.id, user.username)
    user_stats.add_calculation(user.id, "compatibility")
    
    # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    processing_msg = await update.message.reply_text(
        "üíû *–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å...*\n"
        "‚è≥ *–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 20-25 —Å–µ–∫—É–Ω–¥*",
        parse_mode='Markdown'
    )
    
    await asyncio.sleep(5)
    await processing_msg.edit_text("üíû *–°—Ä–∞–≤–Ω–∏–≤–∞—é –ø—Å–∏—Ö–æ–º–∞—Ç—Ä–∏—Ü—ã...*")
    await asyncio.sleep(5)
    await processing_msg.edit_text("üíû *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç–æ–∫–∏...*")
    await asyncio.sleep(5)
    await processing_msg.edit_text("üíû *–°–æ—Å—Ç–∞–≤–ª—è—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π...*")
    await asyncio.sleep(5)
    
    cube1 = PythagorasCube(partner1_date)
    psychomatrix1 = cube1.calculate()
    
    cube2 = PythagorasCube(partner2_date)
    psychomatrix2 = cube2.calculate()
    
    result = cube2.calculate_compatibility(psychomatrix1, psychomatrix2, partner1_name, partner2_name)
    
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=processing_msg.message_id)
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")],
        [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(result, parse_mode='Markdown', reply_markup=reply_markup)
    user_states[user.id] = MAIN_MENU

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_text = update.message.text
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"üîç –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
    print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} ({user.first_name})")
    print(f"   üìù –¢–µ–∫—Å—Ç: {message_text}")
    print(f"   üè∑Ô∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_states.get(user.id, '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}")
    
    if user.id not in user_states:
        user_states[user.id] = MAIN_MENU
        print(f"   ‚ö° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MAIN_MENU –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    current_state = user_states[user.id]
    print(f"   üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_state}")
    
    try:
        if current_state == WAITING_SELF_NAME:
            print("   üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞")
            await handle_self_name(update, context)
        elif current_state == WAITING_SELF_DATE:
            print("   üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –¥–ª—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞")
            await handle_self_date(update, context)
        elif current_state == WAITING_PARTNER1_NAME:
            print("   üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
            await handle_partner1_name(update, context)
        elif current_state == WAITING_PARTNER1_DATE:
            print("   üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
            await handle_partner1_date(update, context)
        elif current_state == WAITING_PARTNER2_NAME:
            print("   üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏ –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
            await handle_partner2_name(update, context)
        elif current_state == WAITING_PARTNER2_DATE:
            print("   üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
            await handle_partner2_date(update, context)
        else:
            print("   üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await start(update, context)
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    ADMIN_IDS = [5917286646, 1698403624]
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    stats = user_stats.get_stats()
    
    text = (
        "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê*\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{stats['total_users']}*\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: *{stats['active_today']}*\n"
        f"üîÆ –†–∞—Å—á–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: *{stats['calculations_today']}*\n"
        f"üìà –í—Å–µ–≥–æ —Ä–∞—Å—á–µ—Ç–æ–≤: *{stats['calculations_total']}*\n"
        f"üíû –†–∞—Å—á–µ—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: *{stats['compatibility_total']}*\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å: *{stats['last_reset']}*\n\n"
        "‚ö° *–¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
    )
    
    top_users = sorted(stats['user_calculations'].items(), key=lambda x: x[1], reverse=True)[:5]
    
    for i, (user_id, calcs) in enumerate(top_users, 1):
        text += f"{i}. ID {user_id}: {calcs} —Ä–∞—Å—á–µ—Ç–æ–≤\n"
    
    await update.message.reply_text(text, parse_mode='Markdown')

def main():
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("stats", stats_command))

    print("ü§ñ –ë–û–¢ –° –ü–û–õ–ù–´–ú –ê–ù–ê–õ–ò–ó–û–ú –ö–í–ê–î–†–ê–¢–ê –ü–ò–§–ê–ì–û–†–ê –ó–ê–ü–£–©–ï–ù!")
    print("üîÆ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö 9 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    print("üíû –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏") 
    print("üë§ –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    print("üìä –õ–∏–º–∏—Ç: 3 —Ä–∞—Å—á–µ—Ç–∞ + 2 –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞")
    print("‚è≥ –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: 20-25 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    print("‚ú® –ë–æ—Ç: @pythagoras_cube_bot")
    print("üöÄ –í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    application.run_polling()

if __name__ == '__main__':

    main()




